Subject: [PATCH] asfasd
---
Index: react-native-harmony/Libraries/Animated/NativeAnimatedHelper.harmony.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/react-native-harmony/Libraries/Animated/NativeAnimatedHelper.harmony.js b/react-native-harmony/Libraries/Animated/NativeAnimatedHelper.harmony.js
--- a/react-native-harmony/Libraries/Animated/NativeAnimatedHelper.harmony.js	(revision 67ae7eed9f1c353fe6687290a4bf9154a35c032d)
+++ b/react-native-harmony/Libraries/Animated/NativeAnimatedHelper.harmony.js	(date 1717414418609)
@@ -40,10 +40,8 @@
 // $FlowFixMe
 let singleOpQueue: Array<any> = [];
 
-const useSingleOpBatching =
-  Platform.OS === 'android' &&
-  !!NativeAnimatedModule?.queueAndExecuteBatchedOperations &&
-  ReactNativeFeatureFlags.animatedShouldUseSingleOp();
+// RNOH: patch
+const useSingleOpBatching = true; // while we do not use operationBatching we want to use logic for listening to events
 let flushQueueTimeout = null;
 
 const eventListenerGetValueCallbacks: {
@@ -55,40 +53,8 @@
 let globalEventEmitterGetValueListener: ?EventSubscription = null;
 let globalEventEmitterAnimationFinishedListener: ?EventSubscription = null;
 
-const nativeOps: ?typeof NativeAnimatedModule = useSingleOpBatching
-  ? ((function () {
-      const apis = [
-        'createAnimatedNode', // 1
-        'updateAnimatedNodeConfig', // 2
-        'getValue', // 3
-        'startListeningToAnimatedNodeValue', // 4
-        'stopListeningToAnimatedNodeValue', // 5
-        'connectAnimatedNodes', // 6
-        'disconnectAnimatedNodes', // 7
-        'startAnimatingNode', // 8
-        'stopAnimation', // 9
-        'setAnimatedNodeValue', // 10
-        'setAnimatedNodeOffset', // 11
-        'flattenAnimatedNodeOffset', // 12
-        'extractAnimatedNodeOffset', // 13
-        'connectAnimatedNodeToView', // 14
-        'disconnectAnimatedNodeFromView', // 15
-        'restoreDefaultValues', // 16
-        'dropAnimatedNode', // 17
-        'addAnimatedEventToView', // 18
-        'removeAnimatedEventFromView', // 19
-        'addListener', // 20
-        'removeListener', // 21
-      ];
-      return apis.reduce<{[string]: number}>((acc, functionName, i) => {
-        // These indices need to be kept in sync with the indices in native (see NativeAnimatedModule in Java, or the equivalent for any other native platform).
-        // $FlowFixMe[prop-missing]
-        acc[functionName] = i + 1;
-        return acc;
-      }, {});
-    })(): $FlowFixMe)
-  : NativeAnimatedModule;
-
+// RNOH: patch
+const nativeOps = NativeAnimatedModule;
 /**
  * Wrappers around NativeAnimatedModule to provide flow and autocomplete support for
  * the native module methods, and automatic queue management on Android
@@ -166,7 +132,11 @@
       // use RCTDeviceEventEmitter. This reduces overhead of sending lots of
       // JSI functions across to native code; but also, TM infrastructure currently
       // does not support packing a function into native arrays.
-      NativeAnimatedModule?.queueAndExecuteBatchedOperations?.(singleOpQueue);
+
+      // RNOH: patch
+      for (let q = 0, l = singleOpQueue.length; q < l; q++) {
+        singleOpQueue[q]();
+      }
       singleOpQueue.length = 0;
     } else {
       Platform.OS === 'android' &&
@@ -184,18 +154,13 @@
     fn: Fn,
     ...args: Args
   ): void => {
-    if (useSingleOpBatching) {
-      // Get the command ID from the queued function, and push that ID and any arguments needed to execute the operation
-      // $FlowFixMe: surprise, fn is actually a number
-      singleOpQueue.push(fn, ...args);
-      return;
-    }
-
     // If queueing is explicitly on, *or* the queue has not yet
     // been flushed, use the queue. This is to prevent operations
     // from being executed out of order.
-    if (queueOperations || queue.length !== 0) {
-      queue.push(() => fn(...args));
+    // RNOH: patch
+    const currentlyUsedQueue = useSingleOpBatching ? singleOpQueue : queue;
+    if (queueOperations || currentlyUsedQueue.length !== 0) {
+      currentlyUsedQueue.push(() => fn(...args));
     } else {
       fn(...args);
     }
Index: tester/harmony/react_native_openharmony/src/main/cpp/RNOHCorePackage/TurboModules/Animated/NativeAnimatedTurboModule.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tester/harmony/react_native_openharmony/src/main/cpp/RNOHCorePackage/TurboModules/Animated/NativeAnimatedTurboModule.cpp b/tester/harmony/react_native_openharmony/src/main/cpp/RNOHCorePackage/TurboModules/Animated/NativeAnimatedTurboModule.cpp
--- a/tester/harmony/react_native_openharmony/src/main/cpp/RNOHCorePackage/TurboModules/Animated/NativeAnimatedTurboModule.cpp	(revision 67ae7eed9f1c353fe6687290a4bf9154a35c032d)
+++ b/tester/harmony/react_native_openharmony/src/main/cpp/RNOHCorePackage/TurboModules/Animated/NativeAnimatedTurboModule.cpp	(date 1717414496938)
@@ -56,7 +56,9 @@
     size_t count) {
   auto self = static_cast<NativeAnimatedTurboModule*>(&turboModule);
   auto value = self->getValue(args[0].getNumber());
-  args[1].getObject(rt).getFunction(rt).call(rt, value);
+  if (count > 1) {
+    args[1].getObject(rt).getFunction(rt).call(rt, value);
+  }
   return facebook::jsi::Value::undefined();
 }
 
@@ -108,7 +110,7 @@
   auto self = static_cast<NativeAnimatedTurboModule*>(&turboModule);
   auto animationId = args[0].getNumber();
   auto config = jsi::dynamicFromValue(rt, args[2]);
-  if (args[3].isUndefined()) {
+  if (count < 4 || args[3].isUndefined()) {
     self->startAnimatingNode(
         animationId,
         args[1].getNumber(),
@@ -363,18 +365,9 @@
     react::Tag nodeTag,
     folly::dynamic const& config,
     std::function<void(bool)>&& endCallback) {
-  auto jsThreadCallback = [jsInvoker = this->jsInvoker_,
-                           endCallback =
-                               std::move(endCallback)](bool finished) mutable {
-    // callbacks passed from JS need to be called through the jsInvoker
-    // to ensure proper handling by React
-    jsInvoker->invokeAsync([finished, endCallback = std::move(endCallback)] {
-      endCallback(finished);
-    });
-  };
   auto lock = acquireLock();
   m_animatedNodesManager.startAnimatingNode(
-      animationId, nodeTag, config, std::move(jsThreadCallback));
+      animationId, nodeTag, config, std::move(endCallback));
 }
 
 void NativeAnimatedTurboModule::stopAnimation(react::Tag animationId) {
