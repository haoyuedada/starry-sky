// @flow strict-local

import type {
  BubblingEventHandler,
  Int32,
  Double,
  Float,
} from 'react-native/Libraries/Types/CodegenTypes';
import codegenNativeComponent, {
  NativeComponentType,
} from 'react-native/Libraries/Utilities/codegenNativeComponent';
import codegenNativeCommands from 'react-native/Libraries/Utilities/codegenNativeCommands';
import type { ProcessedColorValue, ViewProps } from 'react-native';

export type OnAnimationFinishEvent = $ReadOnly<{|
  isCancelled: boolean,
|}>;

export type AnimationFailureEvent = $ReadOnly<{|
  error: string,
|}>;

type AnimationLoadedEvent = $ReadOnly<{||}>;

type ColorFilterStruct = $ReadOnly<{|
  keypath: string,
  color: ProcessedColorValue,
|}>;

type TextFilterIOSStruct = $ReadOnly<{|
  keypath: string,
  text: string,
|}>;

type TextFilterAndroidStruct = $ReadOnly<{|
  find: string,
  replace: string,
|}>;

export type NativeProps  = $ReadOnly<{|
  ...ViewProps,
  resizeMode?: string,
  sourceJson?: string,
  sourceName?: string,
  progress?: Float,
  loop?: boolean,
  speed?: Float,
  colorFilters?: $ReadOnlyArray<ColorFilterStruct>,
  // dummy that solves codegen issue when there's a $ReadOnlyArray<Object> without another Object prop
  // https://github.com/reactwg/react-native-new-architecture/discussions/104
  dummy?: $ReadOnly<{| dummy: boolean |}>,
  onAnimationFinish?: BubblingEventHandler<
    OnAnimationFinishEvent,
    'onAnimationFinish'
  >,
|}>;

type LottieViewNativeComponentType = NativeComponentType<NativeProps>;

interface NativeCommands {
  +play: (
    viewRef: React.ElementRef<LottieViewNativeComponentType>,
    startFrame: Int32,
    endFrame: Int32,
  ) => void;
  +reset: (viewRef: React.ElementRef<LottieViewNativeComponentType>) => void;
  +pause: (viewRef: React.ElementRef<LottieViewNativeComponentType>) => void;
  +resume: (viewRef: React.ElementRef<LottieViewNativeComponentType>) => void;
}

export const Commands: NativeCommands = codegenNativeCommands<NativeCommands>({
  supportedCommands: ['play', 'reset', 'pause', 'resume'],
});

export default codegenNativeComponent<NativeProps>('LottieAnimationView');
