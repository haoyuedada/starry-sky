20	P1	使用Animated.View做的卡片折叠动画卡顿，并且有时候onLayout有时候不会触发（当页面越复杂的时候复现越容易）	7月23日	待验证	RN	陈皓月	"0711：与宜文确认。此场景没问题。
0625：待和携程确认场景
0612：和业务沟通
0605：待启动"				"// cardcomponent.js
import React, { useState } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import Collapsible from './Collapsible';

const CardComponent = () => {
    const [collapsed, setCollapsed] = useState(true);

    const toggleExpanded = () => {
        setCollapsed(!collapsed);
    };

    return (
        <View style={styles.cardContainer}>
            <Button title={collapsed ? ""Expand"" : ""Collapse""} onPress={toggleExpanded} />
            <Collapsible collapsed={collapsed}>
                <View style={styles.collapsibleContent}>
                    <Text>This is the content that will be collapsed and expanded.</Text>
                </View>
            </Collapsible>
        </View>
    );
};

const styles = StyleSheet.create({
    cardContainer: {
        borderWidth: 1,
        borderColor: '#ccc',
        borderRadius: 8,
        padding: 16,
        margin: 16,
        backgroundColor: '#fff',
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 8,
        elevation: 5,
    },
    collapsibleContent: {
        padding: 16,
    },
});

export default CardComponent;

// collapsible.js
import React, { Component } from 'react';
import { Animated, Easing, View, ViewProps, LayoutChangeEvent, StyleProp, ViewStyle } from 'react-native';

class Collapsible extends Component {
    unmounted = false;
    _animation = null

    constructor(props) {
        super(props);
        const { collapsedHeight = 0 } = props;

        this.state = {
            measuring: false,
            measured: false,
            height: new Animated.Value(collapsedHeight),
            contentHeight: 0,
            animating: false,
        };
    }

    componentDidUpdate(prevProps) {
        if (prevProps.collapsed !== this.props.collapsed) {
            this.setState({ measured: false }, () => this._componentDidUpdate(prevProps));
        } else {
            this._componentDidUpdate(prevProps);
        }
    }

    componentWillUnmount() {
        this.unmounted = true;
    }

    _componentDidUpdate(prevProps) {
        if (prevProps.collapsed !== this.props.collapsed) {
            this._toggleCollapsed(!!this.props.collapsed);
        } else if (this.props.collapsed && prevProps.collapsedHeight !== this.props.collapsedHeight) {
            this.state.height.setValue(this.props.collapsedHeight);
        }
    }

    contentHandle = null;

    _handleRef = (ref) => {
        this.contentHandle = ref;
    };

    _measureContent(callback) {
        this.setState(
            {
                measuring: true,
            },
            () => {
                requestAnimationFrame(() => {
                    if (!this.contentHandle) {
                        this.setState(
                            {
                                measuring: false,
                            },
                            () => callback(this.props.collapsedHeight)
                        );
                    } else {
                        try {
                            this.contentHandle.measure((x, y, width, height) => {
                                this.setState(
                                    {
                                        measuring: false,
                                        measured: true,
                                        contentHeight: height,
                                    },
                                    () => callback(height)
                                );
                            });
                        } catch (error) {
                            console.error(error);
                        }
                    }
                });
            }
        );
    }

    _toggleCollapsed(collapsed) {
        const { collapsedHeight = 0 } = this.props;

        if (collapsed) {
            this._transitionToHeight(collapsedHeight);
        } else if (!this.contentHandle) {
            if (this.state.measured) {
                this._transitionToHeight(this.state.contentHeight);
            }
        } else {
            this._measureContent((contentHeight) => {
                this._transitionToHeight(contentHeight);
            });
        }
    }

    _transitionToHeight(height) {
        const { duration = 300 } = this.props;
        const easing = Easing.ease;

        if (this._animation) {
            this._animation.stop();
        }
        this.setState({ animating: true });
        this._animation = Animated.timing(this.state.height, {
            toValue: height,
            duration,
            easing,
            useNativeDriver: false,
        });
        this._animation.start(() => {
            if (this.unmounted) {
                return;
            }
            this.setState({ animating: false }, () => {
                if (this.unmounted) {
                    return;
                }
                if (this.props.onAnimationEnd) {
                    this.props.onAnimationEnd();
                }
            });
        });
    }

    _handleLayoutChange = (event) => {
        console.log('event', event.nativeEvent.layout.height);
        const contentHeight = event.nativeEvent.layout.height;
        if (
            this.state.animating ||
            this.props.collapsed ||
            this.state.measuring ||
            this.state.contentHeight === contentHeight
        ) {
            return;
        }

        this.state.height.setValue(contentHeight);
        this.setState({ contentHeight });
    };

    render() {
        const { collapsed = false, enablePointerEvents = false, align = 'top' } = this.props;
        const { height, contentHeight, measuring, measured } = this.state;
        const hasKnownHeight = !measuring && (measured || collapsed);

        const style = hasKnownHeight
            ? {
                  overflow: 'hidden',
                  height,
              }
            : {};
        const contentStyle = {};
        if (measuring) {
            contentStyle.position = 'absolute';
            contentStyle.opacity = 0;
        } else if (align === 'center') {
            contentStyle.transform = [
                {
                    translateY: height.interpolate({
                        inputRange: [0, contentHeight],
                        outputRange: [contentHeight / -2, 0],
                    }),
                },
            ];
        } else if (align === 'bottom') {
            contentStyle.transform = [
                {
                    translateY: height.interpolate({
                        inputRange: [0, contentHeight],
                        outputRange: [-contentHeight, 0],
                    }),
                },
            ];
        }
        return (
            <Animated.View style={style} pointerEvents={!enablePointerEvents && collapsed ? 'none' : 'auto'}>
                <Animated.View
                    ref={this._handleRef}
                    style={[this.props.style ?? {}, contentStyle]}
                    onLayout={this.state.animating ? undefined : this._handleLayoutChange}
                >
                    {this.props.children}
                </Animated.View>
            </Animated.View>
        );
    }
}

export default Collapsible;
"	
