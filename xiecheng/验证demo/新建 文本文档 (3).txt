74	P1	点击“显示搜索框”，textinput autofocus 聚焦的时候键盘会把页面顶上去，无法输入内容，业务（孙雨薇）确认该动画场景一定会用到，需要框架解决，详见视频	7月23日	验证中	RN	陈皓月	"0717：已经在验证，新ROM修复，在现场确认一下
0711：集成RN SDK后在携程环境看下。
0709：待确认场景"				"import React from ""react"";
import { Animated, Button, Dimensions, TextInput, View, } from 'react-native'

class ExampleAnimationSearch extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            visible: props.visible,
            moveAnim: new Animated.Value(0),
        };
    }

    executeAnimation(v, callback) {
        // 1进场0出场
        Animated.timing(this.state.moveAnim, {
          toValue: v,
          duration: this.props.duration,
          useNativeDriver: false,
        }).start(() => callback && callback());
    }

    componentDidMount() {
        if (this.props.visible == true) {
          this.executeAnimation(1);
          this.inputRef?.focus()
        }
    }

    UNSAFE_componentWillReceiveProps(nextProps) {
        if (this.props.visible !== nextProps.visible) {
            if (nextProps.visible == true) {
            this.setState({ visible: true }, () => {
                this.inputRef?.focus()
                this.executeAnimation(1)
            });
            } else {
            this.executeAnimation(0, () => this.setState({ visible: false }));
            }
        }
    }

    render() {
        const { moveAnim, visible } = this.state;

        return (
            <Animated.View
                style={[
                    [{""bottom"": 0, ""height"": ""100%"", ""left"": 0, ""position"": ""absolute"", ""right"": 0, ""top"": 0, ""width"": ""100%"", ""zIndex"": 999}, [{""backgroundColor"": ""#red""}, undefined]],
                    {
                        transform: [
                            {
                                translateY: moveAnim.interpolate({
                                    inputRange: [0, 1],
                                    outputRange: [Dimensions.get('window').height, 0],
                                }),
                            },
                        ],
                    },
                    visible ? null : {""height"": 0, ""overflow"": ""hidden"", ""width"": 0},
                    {
                        backgroundColor: 'blue'
                    }
                ]}
            >
                <View style={[
                    {""backgroundColor"": ""red"",}
                ]}>
                    <TextInput
                        autoFocus={visible}
                        ref={ref => {
                            this.inputRef = ref
                        }}
                        placeholder=""请输入地址""
                        placeholderTextColor='#fff'
                        style={[{ height: 60 }]}
                    />
                    <View style={{ height: 900, backgroundColor: 'blue' }}></View>
                </View>
            </Animated.View>
        )
    }
}

export default class ExampleAnimateionKeyboard extends React.Component {
    constructor(props) {
        super(props)

        this.state = {
            visible: false,
        };
    }

    render() {
        const { visible } = this.state;

        return (
            <View style={{ position: 'relative', }}>
                 <View style={{ position: 'fixed', top: 100, width: '100%' }} >
                    <Button title={`${visible ? '隐藏' : '显示'}搜索框`} onPress={() => {
                        this.setState(pre => ({
                            visible: !pre.visible,
                        }))
                    }} /> 
                </View> 
                <ExampleAnimationSearch visible={visible} />
                
            </View>
        )
    }
}
"	
