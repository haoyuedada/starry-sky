// cardcomponent.js
import React, { useState, useCallback, } from 'react';
import { View, Text, Button, StyleSheet, ScrollView, VirtualizedList, RefreshControl } from 'react-native';

const AAAVirtualizedList = () => {
    // const ref = React.useRef<any>(null);
    // const window = useWindowDimensions();

    const getItemCount = (_data) => 12;
    const getItem = (_data, index) => ({
      id: Math.random().toString(12).substring(0),
      title: `Item ${index + 1}`,
    });
    const Item = ({title}) => (
      <View style={styles.item}>
        <Text style={styles.title}>{title}</Text>
      </View>
    );

    const [refreshing, setRefreshing] = useState(false);
    const onRefresh = useCallback(() => {
      setRefreshing(true);
      wait(2000).then(() => setRefreshing(false));
    }, []);

    const wait = (timeout: number) => {
      return new Promise(resolve => {
        setTimeout(resolve, timeout);
      });
    };

    const [progressViewOffset, setProgressViewOffset] = useState(0);

    const onTest = () =>{
      setProgressViewOffset(progressViewOffset + 10)
    }

    return (
        <View>
            <View style={styles.textStyle}>
                <Text style={{ lineHeight: 20 }}>属性值:30</Text>
            </View>
            <View style={styles.viewStyle}>
                <View style={styles.noteStyle}>
                    <Text style={{ lineHeight: 30 }}>预期效果：</Text>
                    <Text style={{ lineHeight: 20 }}>当数据项的顶部下拉操作时,下拉样式会偏移30</Text>
                </View>
                {/* <Image style={{marginTop:8,marginLeft:10}} source={require('../../../assets/VirtualizedList_scrollToEnd.PNG')}></Image> */}
            </View>
            <View style={styles.viewStyle}>
                <View testID="test_container" style={styles.testContainer}>
                    <Text style={{ paddingTop: 10, paddingLeft: 10 }}>实际效果:progressViewOffset:{progressViewOffset}</Text>
                    <Button
                        title='change'
                        onPress={onTest}
                    ></Button>
                </View>
                <VirtualizedList
                    initialNumToRender={4}
                    renderItem={({ item }) => <Item title={item.title} />}
                    keyExtractor={item => item.id}
                    getItemCount={getItemCount}
                    getItem={getItem}
                    refreshControl={
                        <RefreshControl
                            refreshing={refreshing}
                            onRefresh={onRefresh}
                            progressViewOffset={progressViewOffset}
                        />
                    }
                />
            </View>

        </View>
    );
};

const styles = StyleSheet.create({
    viewStyle:{
      width:300,
      height:240,
      marginBottom:30,
      borderWidth:1,
      borderColor:'black',
      borderStyle:'solid',
      marginLeft:40,
    },
    item: {
      backgroundColor: '#f9c2ff',
      height: 40,
      justifyContent: 'center',
      marginVertical: 8,
      marginHorizontal: 16,
    },
    title: {
      fontSize: 32,
    },
    textStyle:{
      padding:20,
      textAlign:'left',
      lineHeight:30
    },
    noteStyle:{
      paddingTop:10,
      paddingLeft:10,
    },
    testContainer: {
        flexDirection: 'row',
        justifyContent: 'space-between',
        alignItems: 'center',
        backgroundColor: '#f2f2f7ff',
        height: 40,
      },
  })
export default AAAVirtualizedList;
