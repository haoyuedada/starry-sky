index.ets:

import {
  AnyJSBundleProvider,
  ComponentBuilderContext,
  FileJSBundleProvider,
  MetroJSBundleProvider,
  ResourceJSBundleProvider,
  RNApp,
  RNOHErrorDialog,
  RNOHLogger,
  TraceJSBundleProviderDecorator,
  RNOHCoreContext
} from '@rnoh/react-native-openharmony';
import { GeneratedSampleView, PropsDisplayer, SampleView } from 'rnoh-sample-package';
import font from '@ohos.font';
import { createRNPackages } from '../RNPackagesFactory';

const arkTsComponentNames: Array<string> = ["SampleView", "GeneratedSampleView", "PropsDisplayer"];
@Builder
export function buildCustomRNComponent(ctx: ComponentBuilderContext) {
  // There seems to be a problem with the placement of ArkTS components in mixed mode. Nested Stack temporarily avoided.
  Stack(){
    if (ctx.componentName === SampleView.NAME) {
      SampleView({
        ctx: ctx.rnComponentContext,
        tag: ctx.tag,
      })
    }
    if (ctx.componentName === GeneratedSampleView.NAME) {
      GeneratedSampleView({
        ctx: ctx.rnComponentContext,
        tag: ctx.tag,
      })
    }
    if (ctx.componentName === PropsDisplayer.NAME) {
      PropsDisplayer({
        ctx: ctx.rnComponentContext,
        tag: ctx.tag
      })
    }
  }
  .position({x:0, y: 0})

}

const wrappedCustomRNComponentBuilder = wrapBuilder(buildCustomRNComponent)

/**
 * If you want to use custom fonts, you need to register them here.
 * We should support react-native-asset to handle registering fonts automatically.
 */
const fonts: font.FontOptions[] = [
  {
    familyName: 'Pacifico-Regular',
    familySrc: '/assets/fonts/Pacifico-Regular.ttf'
  },
  {
    familyName: 'StintUltraCondensed-Regular',
    familySrc: '/assets/fonts/StintUltraCondensed-Regular.ttf'
  }
]

@Entry
@Component
struct Index {
  @StorageLink('RNOHCoreContext') private rnohCoreContext: RNOHCoreContext | undefined = undefined
  @State shouldShow: boolean = false
  private logger!: RNOHLogger


  aboutToAppear() {
    this.logger = this.rnohCoreContext!.logger.clone("Index")
    const stopTracing = this.logger.clone("aboutToAppear").startTracing()
    for (const customFont of fonts) {
      font.registerFont(customFont)
    }

    this.shouldShow = true
    stopTracing()
  }

  onBackPress(): boolean | undefined {
    // NOTE: this is required since `Ability`'s `onBackPressed` function always
    // terminates or puts the app in the background, but we want Ark to ignore it completely
    // when handled by RN
    this.rnohCoreContext!.dispatchBackPress()
    return true
  }

  build() {
    Column() {
      if (this.rnohCoreContext && this.shouldShow) {
        if (this.rnohCoreContext?.isDebugModeEnabled) {
          RNOHErrorDialog({ ctx: this.rnohCoreContext })
        }
        Row() {
          Text('native渲染')
            .fontSize(30)
            .fontColor('white')
            .fontWeight(20)
        }
        .height(100)
        .width('90%')
        .margin({ top: 10 })
        .backgroundColor('#a0a0ff')
        .borderRadius(10)
        Scroll(){
          RNApp({
            rnInstanceConfig: {
              createRNPackages,
              enableNDKTextMeasuring: true,
              enableBackgroundExecutor: false,
              enableCAPIArchitecture: false,
              arkTsComponentNames: arkTsComponentNames,
            },
            initialProps: { "foo": "bar" } as Record<string, string>,
            appKey: "app_name",
            wrappedCustomRNComponentBuilder: wrappedCustomRNComponentBuilder,
            onSetUp: (rnInstance) => {
              rnInstance.enableFeatureFlag("ENABLE_RN_INSTANCE_CLEAN_UP")
            },
            jsBundleProvider: new TraceJSBundleProviderDecorator(
              new AnyJSBundleProvider([
                new MetroJSBundleProvider(),
                // NOTE: to load the bundle from file, place it in
                // `/data/app/el2/100/base/com.rnoh.tester/files/bundle.harmony.js`
                // on your device. The path mismatch is due to app sandboxing on HarmonyOS
                new FileJSBundleProvider('/data/storage/el2/base/files/bundle.harmony.js'),
                new ResourceJSBundleProvider(this.rnohCoreContext.uiAbilityContext.resourceManager, 'hermes_bundle.hbc'),
                new ResourceJSBundleProvider(this.rnohCoreContext.uiAbilityContext.resourceManager, 'bundle.harmony.js')
              ]),
              this.rnohCoreContext.logger),
          }).height(2000)
        }
      }
    }
    .height('100%')
    .width('100%')
  }
}


RN:
import { TestSuite } from '@rnoh/testerino';
import { Alert, Text, View, StyleSheet, Button } from 'react-native';
import { useState } from 'react';

export default function NativeScroll() {
    const handlePress = () => {
        Alert.alert('点击事件触发')
    }
    
    return (
        <View style={styles.container} style={{ width: '100%' }}>
            {Array.from({ length: 100 }).map((_, i) => (
                // <TouchableOpacity onPress={handlePress}>
                <View style={{ width: '100%', height: 100, backgroundColor: "orange" }}>
                    {/* <Text>item:{i}</Text> */}
                    <Button title='test' onPress={() => { handlePress() }}></Button>
                </View>
                // </TouchableOpacity>

            ))}
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        padding: 16,
    },
    heading: {
        fontSize: 24,
        marginBottom: 20,
    },
    input: {
        height: 40,
        borderColor: "gray",
        borderWidth: 1,
        width: "100%",
        paddingHorizontal: 8,
        marginBottom: 20,
    },
    message: {
        fontSize: 18,
        color: "blue",
    },
});