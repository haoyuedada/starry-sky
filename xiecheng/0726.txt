export function VirtualizedList_progressViewOffset(): React.Node {
    const ref = React.useRef<any>(null);
    const window = useWindowDimensions();

    const getItemCount = (_data) => 12;
    const getItem = (_data, index) => ({
      id: Math.random().toString(12).substring(0),
      title: `Item ${index + 1}`,
    });
    const Item = ({title}) => (
      <View style={styles.item}>
        <Text style={styles.title}>{title}</Text>
      </View>
    );

    const [refreshing, setRefreshing] = React.useState(false);
    const onRefresh = React.useCallback(() => {
      setRefreshing(true);
      wait(2000).then(() => setRefreshing(false));
    }, []);

    const wait = (timeout: number) => {
      return new Promise(resolve => {
        setTimeout(resolve, timeout);
      });
    };

    const [progressViewOffset, setProgressViewOffset] = React.useState(0);

    const onTest = () =>{
      setProgressViewOffset(progressViewOffset + 10)
    }
 
    return (
      <ScrollView>
        <View style={styles.textStyle}>
          <Text style={{ lineHeight: 20 }}>属性值:30</Text>
        </View>
        <View style={styles.viewStyle}>
          <View style={styles.noteStyle}>
            <Text style={{ lineHeight: 30 }}>预期效果：</Text>
            <Text style={{ lineHeight: 20 }}>当数据项的顶部下拉操作时,下拉样式会偏移30</Text>
          </View>
          {/* <Image style={{marginTop:8,marginLeft:10}} source={require('../../../assets/VirtualizedList_scrollToEnd.PNG')}></Image> */}
        </View>
        <View style={styles.viewStyle}>
          <View testID="test_container" style={styles.testContainer}>
            <Text style={{ paddingTop: 10, paddingLeft: 10 }}>实际效果:progressViewOffset:{progressViewOffset}</Text>
            <Button
              title='change'
              onPress={onTest}
            ></Button>
          </View>
          <VirtualizedList
            initialNumToRender={4}
            renderItem={({ item }) => <Item title={item.title} />}
            keyExtractor={item => item.id}
            getItemCount={getItemCount}
            getItem={getItem}
            refreshControl={
              <RefreshControl
                refreshing={refreshing}
                onRefresh={onRefresh}
                progressViewOffset={progressViewOffset}
              />
            }
          />
        </View>

      </ScrollView>
    )
}